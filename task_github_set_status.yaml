apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"tekton.dev/categories":"Git","tekton.dev/displayName":"set github status","tekton.dev/pipelines.minVersion":"0.12.1","tekton.dev/platforms":"linux/amd64,linux/s390x,linux/ppc64le","tekton.dev/tags":"github"},"labels":{"app.kubernetes.io/version":"0.4"},"name":"github-set-status","namespace":"teste"},"spec":{"description":"This task will set the status of the CI job to the specified value along with a link to the specified target URL where developers can follow the progress of the CI job.\nThe `github-set-status` task allows external services to mark GitHub commits with an `error`, `failure`, `pending`, or `success` state, which is then reflected in pull requests involving those commits. Statuses include as well a `description` and a `target_url`, to give the user informations about the CI statuses or a direct link to the full log.","params":[{"default":"api.github.com","description":"The GitHub host, adjust this if you run a GitHub enteprise.\n","name":"GITHUB_HOST_URL","type":"string"},{"default":"","description":"The API path prefix, GitHub Enterprise has a prefix e.g. /api/v3\n","name":"API_PATH_PREFIX","type":"string"},{"description":"The GitHub repository full name, e.g.: tektoncd/catalog\n","name":"REPO_FULL_NAME","type":"string"},{"default":"github","description":"The name of the kubernetes secret that contains the GitHub token, default: github\n","name":"GITHUB_TOKEN_SECRET_NAME","type":"string"},{"default":"token","description":"The key within the kubernetes secret that contains the GitHub token, default: token\n","name":"GITHUB_TOKEN_SECRET_KEY","type":"string"},{"description":"Commit SHA to set the status for.\n","name":"SHA","type":"string"},{"description":"The target URL to associate with this status. This URL will be linked\nfrom the GitHub UI to allow users to easily see the source of the\nstatus.\n","name":"TARGET_URL","type":"string"},{"description":"A short description of the status.\n","name":"DESCRIPTION","type":"string"},{"default":"continuous-integration/tekton","description":"The GitHub context, A string label to differentiate this status from\nthe status of other systems. ie: \"continuous-integration/tekton\"\n","name":"CONTEXT","type":"string"},{"description":"The state of the status. Can be one of the following `error`,\n`failure`, `pending`, or `success`.\n","name":"STATE","type":"string"},{"default":"Bearer","description":"The type of authentication to use. You could use the less secure \"Basic\" for example\n","name":"AUTH_TYPE","type":"string"},{"default":"python:3.10.1-alpine3.15","description":"Image providing the python binary which this task uses.\n","name":"IMAGE","type":"string"},{"default":"/usr/bin/env python","description":"Python path. Depends on the image.\n","name":"SHEBANG","type":"string"}],"steps":[{"env":[{"name":"GITHUB_HOST_URL","value":"$(params.GITHUB_HOST_URL)"},{"name":"API_PATH_PREFIX","value":"$(params.API_PATH_PREFIX)"},{"name":"REPO_FULL_NAME","value":"$(params.REPO_FULL_NAME)"},{"name":"GITHUB_TOKEN_SECRET_NAME","value":"$(params.GITHUB_TOKEN_SECRET_NAME)"},{"name":"GITHUB_TOKEN_SECRET_KEY","value":"$(params.GITHUB_TOKEN_SECRET_KEY)"},{"name":"SHA","value":"$(params.SHA)"},{"name":"TARGET_URL","value":"$(params.TARGET_URL)"},{"name":"DESCRIPTION","value":"$(params.DESCRIPTION)"},{"name":"CONTEXT","value":"$(params.CONTEXT)"},{"name":"STATE","value":"$(params.STATE)"},{"name":"AUTH_TYPE","value":"$(params.AUTH_TYPE)"},{"name":"SHEBANG","value":"$(params.SHEBANG)"}],"image":"$(params.IMAGE)","name":"set-status","script":"#!$(params.SHEBANG)\n\n\"\"\"This script will set the CI status on GitHub PR\"\"\"\n\nimport json\nimport os\nimport sys\nimport http.client\n\ngithub_token_filename = \"/etc/github-set-status/\" + \\\n    os.getenv(\"GITHUB_TOKEN_SECRET_KEY\")\ngithub_token = open(github_token_filename, \"r\").read()\n\nstatus_url = os.getenv(\"API_PATH_PREFIX\") + \"/repos/\" + \\\n    os.getenv(\"REPO_FULL_NAME\") + \"/statuses/\" + os.getenv(\"SHA\")\n\ndata = {\n    \"state\": os.getenv(\"STATE\"),\n    \"target_url\": os.getenv(\"TARGET_URL\"),\n    \"description\": os.getenv(\"DESCRIPTION\"),\n    \"context\": os.getenv(\"CONTEXT\")\n}\nprint(\"Sending this data to GitHub@{url}: \".format(\n  url=os.getenv(\"GITHUB_HOST_URL\")))\nprint(data)\n\nauthHeader = os.getenv(\"AUTH_TYPE\") + \" \" + github_token\n\n# This is for our fake github server\nif \"$(params.GITHUB_HOST_URL)\".startswith(\"http://\"):\n  conn = http.client.HTTPConnection(\"$(params.GITHUB_HOST_URL)\".replace(\"http://\", \"\"))\nelse:\n  conn = http.client.HTTPSConnection(\"$(params.GITHUB_HOST_URL)\")\n\nconn.request(\n    \"POST\",\n    status_url,\n    body=json.dumps(data),\n    headers={\n        \"User-Agent\": \"TektonCD, the peaceful cat\",\n        \"Authorization\": authHeader,\n        \"Accept\": \"application/vnd.github.v3+json \",\n    })\nresp = conn.getresponse()\nif not str(resp.status).startswith(\"2\"):\n    print(\"Error: %d\" % (resp.status))\n    print(resp.read())\n    sys.exit(1)\nelse:\n    print(\"GitHub status '{state}' has been set on {repo}#{sha} \".format(\n        state=os.getenv(\"STATE\"),\n        repo=os.getenv(\"REPO_FULL_NAME\"),\n        sha=os.getenv(\"SHA\")))\n","volumeMounts":[{"mountPath":"/etc/github-set-status","name":"githubtoken"}]}],"volumes":[{"name":"githubtoken","secret":{"secretName":"$(params.GITHUB_TOKEN_SECRET_NAME)"}}]}}
    tekton.dev/categories: Git
    tekton.dev/displayName: set github status
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le
    tekton.dev/tags: github
  creationTimestamp: "2022-07-15T19:20:38Z"
  generation: 3
  labels:
    app.kubernetes.io/version: "0.4"
  name: github-set-status
  resourceVersion: "131480"
  uid: 36e25c15-fcf5-4475-9bf4-d7e23aa7ae1d
spec:
  description: |-
    This task will set the status of the CI job to the specified value along with a link to the specified target URL where developers can follow the progress of the CI job.
    The `github-set-status` task allows external services to mark GitHub commits with an `error`, `failure`, `pending`, or `success` state, which is then reflected in pull requests involving those commits. Statuses include as well a `description` and a `target_url`, to give the user informations about the CI statuses or a direct link to the full log.
  params:
  - default: api.github.com
    description: |
      The GitHub host, adjust this if you run a GitHub enteprise.
    name: GITHUB_HOST_URL
    type: string
  - default: ""
    description: |
      The API path prefix, GitHub Enterprise has a prefix e.g. /api/v3
    name: API_PATH_PREFIX
    type: string
  - description: |
      The GitHub repository full name, e.g.: tektoncd/catalog
    name: REPO_FULL_NAME
    type: string
  - default: github
    description: |
      The name of the kubernetes secret that contains the GitHub token, default: github
    name: GITHUB_TOKEN_SECRET_NAME
    type: string
  - default: token
    description: |
      The key within the kubernetes secret that contains the GitHub token, default: token
    name: GITHUB_TOKEN_SECRET_KEY
    type: string
  - description: |
      Commit SHA to set the status for.
    name: SHA
    type: string
  - description: |
      The target URL to associate with this status. This URL will be linked
      from the GitHub UI to allow users to easily see the source of the
      status.
    name: TARGET_URL
    type: string
  - description: |
      A short description of the status.
    name: DESCRIPTION
    type: string
  - default: continuous-integration/tekton
    description: |
      The GitHub context, A string label to differentiate this status from
      the status of other systems. ie: "continuous-integration/tekton"
    name: CONTEXT
    type: string
  - description: |
      The state of the status. Can be one of the following `error`,
      `failure`, `pending`, or `success`.
    name: STATE
    type: string
  - default: Bearer
    description: |
      The type of authentication to use. You could use the less secure "Basic" for example
    name: AUTH_TYPE
    type: string
  - default: python:3.10.1-alpine3.15
    description: |
      Image providing the python binary which this task uses.
    name: IMAGE
    type: string
  - default: /usr/bin/env python
    description: |
      Python path. Depends on the image.
    name: SHEBANG
    type: string
  steps:
  - env:
    - name: GITHUB_HOST_URL
      value: $(params.GITHUB_HOST_URL)
    - name: API_PATH_PREFIX
      value: $(params.API_PATH_PREFIX)
    - name: REPO_FULL_NAME
      value: $(params.REPO_FULL_NAME)
    - name: GITHUB_TOKEN_SECRET_NAME
      value: $(params.GITHUB_TOKEN_SECRET_NAME)
    - name: GITHUB_TOKEN_SECRET_KEY
      value: $(params.GITHUB_TOKEN_SECRET_KEY)
    - name: SHA
      value: $(params.SHA)
    - name: TARGET_URL
      value: $(params.TARGET_URL)
    - name: DESCRIPTION
      value: $(params.DESCRIPTION)
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: STATE
      value: $(params.STATE)
    - name: AUTH_TYPE
      value: $(params.AUTH_TYPE)
    - name: SHEBANG
      value: $(params.SHEBANG)
    image: $(params.IMAGE)
    name: set-status
    resources: {}
    script: |
      #!$(params.SHEBANG)

      """This script will set the CI status on GitHub PR"""

      import json
      import os
      import sys
      import http.client

      github_token_filename = "/etc/github-set-status/" + \
          os.getenv("GITHUB_TOKEN_SECRET_KEY")
      github_token = open(github_token_filename, "r").read()

      status_url = os.getenv("API_PATH_PREFIX") + "/repos/" + \
          os.getenv("REPO_FULL_NAME") + "/statuses/" + os.getenv("SHA")

      allowed_states = {
        "Succeeded": "success",
        "Failed": "failure",
        "Completed": "success",
        "None": "pending",
        "pending": "pending"
      }

      data = {
          "state": allowed_states[os.getenv("STATE")],
          "target_url": os.getenv("TARGET_URL"),
          "description": os.getenv("DESCRIPTION"),
          "context": os.getenv("CONTEXT")
      }
      print("Sending this data to GitHub@{url}: ".format(
        url=os.getenv("GITHUB_HOST_URL")))
      print(data)

      authHeader = os.getenv("AUTH_TYPE") + " " + github_token

      # This is for our fake github server
      if "$(params.GITHUB_HOST_URL)".startswith("http://"):
        conn = http.client.HTTPConnection("$(params.GITHUB_HOST_URL)".replace("http://", ""))
      else:
        conn = http.client.HTTPSConnection("$(params.GITHUB_HOST_URL)")

      conn.request(
          "POST",
          status_url,
          body=json.dumps(data),
          headers={
              "User-Agent": "TektonCD, the peaceful cat",
              "Authorization": authHeader,
              "Accept": "application/vnd.github.v3+json ",
          })
      resp = conn.getresponse()
      if not str(resp.status).startswith("2"):
          print("Error: %d" % (resp.status))
          print(resp.read())
          sys.exit(1)
      else:
          print("GitHub status '{state}' has been set on {repo}#{sha} ".format(
              state=os.getenv("STATE"),
              repo=os.getenv("REPO_FULL_NAME"),
              sha=os.getenv("SHA")))
    volumeMounts:
    - mountPath: /etc/github-set-status
      name: githubtoken
  volumes:
  - name: githubtoken
    secret:
      secretName: $(params.GITHUB_TOKEN_SECRET_NAME)
